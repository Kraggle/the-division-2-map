const isCoord=c=>c instanceof L.LatLng||Array.isArray(c)&&2===c.length&&"number"==typeof c[0],isCoordArray=ll=>Array.isArray(ll)&&isCoord(ll[0]);L.PolylineDecorator=L.FeatureGroup.extend({options:{patterns:[]},initialize:function(paths,options){L.FeatureGroup.prototype.initialize.call(this),L.Util.setOptions(this,options),this._map=null,this._paths=this._initPaths(paths),this._bounds=this._initBounds(),this._patterns=this._initPatterns(this.options.patterns)},_initPaths:function(input,isPolygon){if(isCoordArray(input)){const coords=isPolygon?input.concat([input[0]]):input;return[coords]}return input instanceof L.Polyline?this._initPaths(input.getLatLngs(),input instanceof L.Polygon):Array.isArray(input)?input.reduce((flatArray,p)=>flatArray.concat(this._initPaths(p,isPolygon)),[]):[]},_initPatterns:function(patternDefs){return patternDefs.map(this._parsePatternDef)},setPatterns:function(patterns){this.options.patterns=patterns,this._patterns=this._initPatterns(this.options.patterns),this.redraw()},setPaths:function(paths){this._paths=this._initPaths(paths),this._bounds=this._initBounds(),this.redraw()},_parsePatternDef:function(patternDef,latLngs){return{symbolFactory:patternDef.symbol,offset:parseRelativeOrAbsoluteValue(patternDef.offset),endOffset:parseRelativeOrAbsoluteValue(patternDef.endOffset),repeat:parseRelativeOrAbsoluteValue(patternDef.repeat)}},onAdd:function(map){this._map=map,this._draw(),this._map.on("moveend",this.redraw,this)},onRemove:function(map){this._map.off("moveend",this.redraw,this),this._map=null,L.FeatureGroup.prototype.onRemove.call(this,map)},_initBounds:function(){const allPathCoords=this._paths.reduce((acc,path)=>acc.concat(path),[]);return L.latLngBounds(allPathCoords)},getBounds:function(){return this._bounds},_buildSymbols:function(latLngs,symbolFactory,directionPoints){return directionPoints.map((directionPoint,i)=>symbolFactory.buildSymbol(directionPoint,latLngs,this._map,i,directionPoints.length))},_getDirectionPoints:function(latLngs,pattern){if(latLngs.length<2)return[];const pathAsPoints=latLngs.map(latLng=>this._map.project(latLng));return projectPatternOnPointPath(pathAsPoints,pattern).map(point=>({latLng:this._map.unproject(L.point(point.pt)),heading:point.heading}))},redraw:function(){this._map&&(this.clearLayers(),this._draw())},_getPatternLayers:function(pattern){const mapBounds=this._map.getBounds().pad(.1);return this._paths.map(path=>{const directionPoints=this._getDirectionPoints(path,pattern).filter(point=>mapBounds.contains(point.latLng));return L.featureGroup(this._buildSymbols(path,pattern.symbolFactory,directionPoints))})},_draw:function(){this._patterns.map(pattern=>this._getPatternLayers(pattern)).forEach(layers=>{this.addLayer(L.featureGroup(layers))})}}),L.polylineDecorator=function(paths,options){return new L.PolylineDecorator(paths,options)};
//# sourceMappingURL=L.PolylineDecorator.min.js.map